#### 1. **多线程并发与数据一致性**

我最初编写的代码在单线程环境下运行良好，但在引入多线程后，哈希表中的键频繁丢失。这是因为多个线程同时访问共享数据结构时，若没有适当的同步机制，可能会导致竞态条件。通过实验，我深刻认识到在并发编程中，锁的作用至关重要。它能够确保某个线程在修改共享资源时，其他线程无法同时进行修改，从而避免数据的竞争和不一致性。

#### 2. **锁的粒度对性能的影响**

在实验的初期，我在整个哈希表上使用了一个全局锁。这种设计虽然能确保数据的一致性，但显著降低了并行性能，因为多个线程在插入数据时必须等待其他线程释放锁。后来，我调整了锁的粒度，为每个哈希桶使用独立的锁，这样可以让不同线程在不干扰彼此的情况下并行地操作不同的哈希桶。这一优化极大地提升了程序的性能，证明了合理的锁粒度设计在并行编程中的重要性。

#### 3. **并行加速与线程安全**

通过实验，我理解了如何在确保线程安全的前提下实现并行加速。实验的结果表明，在使用两线程进行插入操作时，速度接近于单线程的两倍。这种"线性加速"让我意识到，并行编程在多核环境下可以显著提升程序的执行效率。然而，这种加速效果的实现必须基于对数据访问的严格控制，否则并行带来的不仅是效率的提升，还有潜在的数据安全问题。